% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fct_hill_climb.R
\name{hill_climb}
\alias{hill_climb}
\title{Perform hill-climbing optimization}
\usage{
hill_climb(
  current_candidate,
  error_function,
  N,
  hill_climbs = 100,
  LME = FALSE,
  num_preds = NULL,
  progress_bar = TRUE,
  neighborhood_size = 4,
  w.length = NULL,
  outcome = NULL,
  progressor = NULL,
  pb_interval = NULL
)
}
\arguments{
\item{current_candidate}{A data frame representing the initial candidate solution to be optimized.}

\item{error_function}{An objective function that takes a candidate and returns a list containing element `$total_error`.}

\item{N}{Integer. Sample size; the number of subjects in `current_candidate`.}

\item{hill_climbs}{Integer. Maximum number of iterations for hill climbing. Default is 1e2.}

\item{LME}{Logical. If TRUE, perform moves appropriate for mixed-effects data (long-to-wide swaps). Default is FALSE.}

\item{num_preds}{Integer. Number of predictors (columns) when `LME = FALSE`. Required if not mixed-effects.}

\item{progress_bar}{Logical. Whether to display a text progress bar. Default is TRUE.}

\item{neighborhood_size}{Integer. Number of candidate moves evaluated per iteration. Default is 4.}

\item{w.length}{Integer. Number of columns in the wide-format data when `LME = TRUE`. Required for mixed-effects.}

\item{outcome}{Optional vector. Outcome variable for standard model moves (unused if error_function handles it).}

\item{progressor}{Optional function. Callback for external progress updates (internal use).}

\item{pb_interval}{Optional numeric. Interval (in iterations) between progressor calls.}
}
\value{
A list with components:
\describe{
  \item{best_candidate}{The optimized candidate structure achieving lowest error.}
  \item{best_error}{Numeric. The minimum value of the objective function found during optimization.}
}
}
\description{
Executes a hill-climbing algorithm to iteratively improve a candidate data set
by minimizing a supplied error function. Supports both the LM and LME modules.
}
