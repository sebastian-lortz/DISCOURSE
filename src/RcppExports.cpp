// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// candidate_cor_cpp
arma::vec candidate_cor_cpp(const arma::mat& candidate, const arma::vec& outcome);
RcppExport SEXP _discourse_candidate_cor_cpp(SEXP candidateSEXP, SEXP outcomeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type candidate(candidateSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type outcome(outcomeSEXP);
    rcpp_result_gen = Rcpp::wrap(candidate_cor_cpp(candidate, outcome));
    return rcpp_result_gen;
END_RCPP
}
// candidate_reg_cpp
arma::vec candidate_reg_cpp(const arma::mat& candidate, const arma::vec& y, const arma::uvec& positions);
RcppExport SEXP _discourse_candidate_reg_cpp(SEXP candidateSEXP, SEXP ySEXP, SEXP positionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type candidate(candidateSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type positions(positionsSEXP);
    rcpp_result_gen = Rcpp::wrap(candidate_reg_cpp(candidate, y, positions));
    return rcpp_result_gen;
END_RCPP
}
// candidate_reg_cpp_se
arma::mat candidate_reg_cpp_se(const arma::mat& candidate, const arma::vec& y, const arma::uvec& positions);
RcppExport SEXP _discourse_candidate_reg_cpp_se(SEXP candidateSEXP, SEXP ySEXP, SEXP positionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type candidate(candidateSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type positions(positionsSEXP);
    rcpp_result_gen = Rcpp::wrap(candidate_reg_cpp_se(candidate, y, positions));
    return rcpp_result_gen;
END_RCPP
}
// objective_cpp
double objective_cpp(NumericVector x, double target_mean, double target_sd, NumericVector obj_weight, double eps, int mean_dec, int sd_dec);
RcppExport SEXP _discourse_objective_cpp(SEXP xSEXP, SEXP target_meanSEXP, SEXP target_sdSEXP, SEXP obj_weightSEXP, SEXP epsSEXP, SEXP mean_decSEXP, SEXP sd_decSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type target_mean(target_meanSEXP);
    Rcpp::traits::input_parameter< double >::type target_sd(target_sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type obj_weight(obj_weightSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type mean_dec(mean_decSEXP);
    Rcpp::traits::input_parameter< int >::type sd_dec(sd_decSEXP);
    rcpp_result_gen = Rcpp::wrap(objective_cpp(x, target_mean, target_sd, obj_weight, eps, mean_dec, sd_dec));
    return rcpp_result_gen;
END_RCPP
}
// error_function_cpp
Rcpp::List error_function_cpp(const arma::mat& candidate, const arma::vec& outcome, const arma::vec& target_cor, const arma::vec& target_reg, const arma::vec& weight, const arma::uvec& positions, const double cor_dec, const double reg_dec);
RcppExport SEXP _discourse_error_function_cpp(SEXP candidateSEXP, SEXP outcomeSEXP, SEXP target_corSEXP, SEXP target_regSEXP, SEXP weightSEXP, SEXP positionsSEXP, SEXP cor_decSEXP, SEXP reg_decSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type candidate(candidateSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type outcome(outcomeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type target_cor(target_corSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type target_reg(target_regSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type positions(positionsSEXP);
    Rcpp::traits::input_parameter< const double >::type cor_dec(cor_decSEXP);
    Rcpp::traits::input_parameter< const double >::type reg_dec(reg_decSEXP);
    rcpp_result_gen = Rcpp::wrap(error_function_cpp(candidate, outcome, target_cor, target_reg, weight, positions, cor_dec, reg_dec));
    return rcpp_result_gen;
END_RCPP
}
// error_function_cpp_se
Rcpp::List error_function_cpp_se(const arma::mat& candidate, const arma::vec& outcome, const arma::vec& target_cor, const arma::mat& target_reg_se, const arma::vec& weight, const arma::uvec& positions, const double cor_dec, const double reg_dec);
RcppExport SEXP _discourse_error_function_cpp_se(SEXP candidateSEXP, SEXP outcomeSEXP, SEXP target_corSEXP, SEXP target_reg_seSEXP, SEXP weightSEXP, SEXP positionsSEXP, SEXP cor_decSEXP, SEXP reg_decSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type candidate(candidateSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type outcome(outcomeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type target_cor(target_corSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type target_reg_se(target_reg_seSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type positions(positionsSEXP);
    Rcpp::traits::input_parameter< const double >::type cor_dec(cor_decSEXP);
    Rcpp::traits::input_parameter< const double >::type reg_dec(reg_decSEXP);
    rcpp_result_gen = Rcpp::wrap(error_function_cpp_se(candidate, outcome, target_cor, target_reg_se, weight, positions, cor_dec, reg_dec));
    return rcpp_result_gen;
END_RCPP
}
// ols_from_design
arma::vec ols_from_design(const arma::mat& X, const arma::vec& y);
RcppExport SEXP _discourse_ols_from_design(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(ols_from_design(X, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_discourse_candidate_cor_cpp", (DL_FUNC) &_discourse_candidate_cor_cpp, 2},
    {"_discourse_candidate_reg_cpp", (DL_FUNC) &_discourse_candidate_reg_cpp, 3},
    {"_discourse_candidate_reg_cpp_se", (DL_FUNC) &_discourse_candidate_reg_cpp_se, 3},
    {"_discourse_objective_cpp", (DL_FUNC) &_discourse_objective_cpp, 7},
    {"_discourse_error_function_cpp", (DL_FUNC) &_discourse_error_function_cpp, 8},
    {"_discourse_error_function_cpp_se", (DL_FUNC) &_discourse_error_function_cpp_se, 8},
    {"_discourse_ols_from_design", (DL_FUNC) &_discourse_ols_from_design, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_discourse(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
